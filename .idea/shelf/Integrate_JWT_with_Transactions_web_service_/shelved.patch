Index: TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/WebSecurityConfiguration.java
===================================================================
diff --git a/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/WebSecurityConfiguration.java b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/WebSecurityConfiguration.java
deleted file mode 100644
--- a/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/WebSecurityConfiguration.java	(revision d5876923304bc65ca3de15763d844911150056f1)
+++ /dev/null	(revision d5876923304bc65ca3de15763d844911150056f1)
@@ -1,55 +0,0 @@
-package miu.edu.transactionmanagementsystem.config;
-
-import miu.edu.transactionmanagementsystem.filter.JwtFilter;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
-
-@Configuration
-@EnableWebSecurity
-public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
-
-    @Autowired
-    private JwtFilter jwtFilter;
-
-
-
-    @Override
-    protected void configure(HttpSecurity http) throws Exception{
-            http.csrf().disable()
-                    .addFilterBefore(jwtFilter,UsernamePasswordAuthenticationFilter.class)
-                    .authorizeHttpRequests()
-                    .antMatchers("/").permitAll()
-                    .antMatchers("/eureka/css/**","/eureka/images/**","/eureka/fonts/**", "/eureka/js/**").permitAll()
-                    .anyRequest()
-                    .authenticated()
-                    .and()
-                    .httpBasic();
-
-    }
-
-    // configure AuthenticationManager so that it knows from where to load
-    // user for matching credentials
-    // Use BCryptPasswordEncoder
-//    @Override
-//    public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
-//        authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
-//    }
-//
-//    @Bean
-//    public PasswordEncoder passwordEncoder() {
-//        return new BCryptPasswordEncoder();
-//    }
-//
-//    @Bean
-//    public AuthenticationManager authenticationManagerBean() throws Exception {
-//        return super.authenticationManagerBean();
-//    }
-
-
-}
-
-
Index: TransactionManagementSystem/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nserver:\n  port: 8082\n\nspring:\n  application:\n    name: transaction-management-system\n  datasource:\n    url: jdbc:mysql://localhost:3306/Practice\n    username: root\n    driverClassName: com.mysql.cj.jdbc.Driver\n    hikari:\n      maximumPoolSize: 10\n  jpa:\n    show-sql: true\n    hibernate:\n      naming:\n        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\n        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.MySQL8Dialect\n        hbm2ddl:\n          auto: update\n\n\neureka:\n  client:\n    registerWithEureka: true\n    fetchRegistry: true\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TransactionManagementSystem/src/main/resources/application.yml b/TransactionManagementSystem/src/main/resources/application.yml
--- a/TransactionManagementSystem/src/main/resources/application.yml	(revision d5876923304bc65ca3de15763d844911150056f1)
+++ b/TransactionManagementSystem/src/main/resources/application.yml	(date 1652889928548)
@@ -2,12 +2,19 @@
 server:
   port: 8082
 
+keycloak:
+  auth-server-url: http://localhost:8180/auth
+  realm: SpringBootKeycloak
+  resource: login-app
+  public-client: true
+
 spring:
   application:
     name: transaction-management-system
   datasource:
     url: jdbc:mysql://localhost:3306/Practice
     username: root
+    password: root
     driverClassName: com.mysql.cj.jdbc.Driver
     hikari:
       maximumPoolSize: 10
Index: TransactionManagementSystem/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.7</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>miu.edu</groupId>\n    <artifactId>TransactionManagementSystem</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>TransactionManagementSystem</name>\n    <description>TransactionManagementSystem</description>\n    <properties>\n        <java.version>17</java.version>\n        <spring-cloud.version>2021.0.2</spring-cloud.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.5</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.modelmapper</groupId>\n            <artifactId>modelmapper</artifactId>\n            <version>2.4.4</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.modelmapper</groupId>\n            <artifactId>modelmapper</artifactId>\n            <version>2.4.4</version>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-crypto</artifactId>\n            <version>5.6.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TransactionManagementSystem/pom.xml b/TransactionManagementSystem/pom.xml
--- a/TransactionManagementSystem/pom.xml	(revision d5876923304bc65ca3de15763d844911150056f1)
+++ b/TransactionManagementSystem/pom.xml	(date 1652889760380)
@@ -99,6 +99,36 @@
             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
         </dependency>
 
+        <dependency>
+            <groupId>org.keycloak</groupId>
+            <artifactId>keycloak-spring-boot-starter</artifactId>
+            <version>13.0.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.keycloak</groupId>
+            <artifactId>keycloak-admin-client</artifactId>
+            <version>13.0.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.mashape.unirest</groupId>
+            <artifactId>unirest-java</artifactId>
+            <version>1.4.9</version>
+        </dependency>
+
+        <dependency>
+            <groupId>commons-io</groupId>
+            <artifactId>commons-io</artifactId>
+            <version>1.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.nimbusds</groupId>
+            <artifactId>nimbus-jose-jwt</artifactId>
+            <version>9.22</version>
+        </dependency>
+
     </dependencies>
 
     <dependencyManagement>
Index: TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/SecurityConfig.java b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1652891132564)
+++ b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/SecurityConfig.java	(date 1652891132564)
@@ -0,0 +1,58 @@
+package miu.edu.transactionmanagementsystem.config;
+
+import miu.edu.transactionmanagementsystem.filter.JwtFilter;
+import org.keycloak.adapters.springsecurity.KeycloakConfiguration;
+import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
+import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
+import org.springframework.security.core.session.SessionRegistryImpl;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
+import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
+
+@KeycloakConfiguration
+class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
+
+    @Autowired
+    private JwtFilter jwtFilter;
+
+    @Autowired
+    private UserDetailsService userDetailsService;
+
+    @Autowired
+    public void configureGlobal(
+            AuthenticationManagerBuilder auth) throws Exception {
+
+        KeycloakAuthenticationProvider keycloakAuthenticationProvider
+                = keycloakAuthenticationProvider();
+        keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(
+                new SimpleAuthorityMapper());
+        auth.authenticationProvider(keycloakAuthenticationProvider);
+    }
+
+    @Bean
+    @Override
+    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
+        return new RegisterSessionAuthenticationStrategy(
+                new SessionRegistryImpl());
+    }
+
+    @Override
+    protected void configure(HttpSecurity http) throws Exception {
+        super.configure(http);
+        http.csrf().disable()
+                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
+                .authorizeRequests()
+                .antMatchers("/").permitAll()
+                .antMatchers(HttpMethod.POST, "/login").permitAll()
+                .anyRequest()
+                .permitAll();
+    }
+
+}
\ No newline at end of file
Index: TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/filter/JwtFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package miu.edu.transactionmanagementsystem.filter;\n\nimport lombok.SneakyThrows;\nimport miu.edu.transactionmanagementsystem.exception.ExceptionResponse;\nimport miu.edu.transactionmanagementsystem.util.ObjectMapperUtil;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.time.LocalDateTime;\n\n@Component\npublic class JwtFilter implements Filter {\n\n\n    @SneakyThrows\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) request;\n        String url = String.valueOf(httpRequest.getRequestURL());\n        if (url.contains(\"/login\")) {\n            chain.doFilter(request, response);\n        } else {\n            String header = httpRequest.getHeader(\"Authorization\");\n            try {\n                //header\n                //decrypt the jwt\n                header.contains(\"test\");\n                chain.doFilter(request, response);\n            } catch (Exception e) {\n                setErrorResponse(HttpStatus.BAD_REQUEST, (HttpServletResponse) response, e);\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void setErrorResponse(HttpStatus status, HttpServletResponse response, Throwable ex) {\n        response.setStatus(status.value());\n        response.setContentType(\"application/json\");\n        // A class used for errors\n        ExceptionResponse apiError = ExceptionResponse\n                .builder()\n                .errorMessage(\"Unauthorized\")\n                .timeStamp(LocalDateTime.now())\n                .debugMessage(\"No Header found\")\n                .responseStatus(HttpStatus.UNAUTHORIZED)\n                .responseCode(401).build();\n        try {\n            String json = ObjectMapperUtil.convertToJson(apiError);\n            System.out.println(json);\n            response.getWriter().write(json);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/filter/JwtFilter.java b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/filter/JwtFilter.java
--- a/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/filter/JwtFilter.java	(revision d5876923304bc65ca3de15763d844911150056f1)
+++ b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/filter/JwtFilter.java	(date 1652890554656)
@@ -1,5 +1,6 @@
 package miu.edu.transactionmanagementsystem.filter;
 
+import com.nimbusds.jwt.SignedJWT;
 import lombok.SneakyThrows;
 import miu.edu.transactionmanagementsystem.exception.ExceptionResponse;
 import miu.edu.transactionmanagementsystem.util.ObjectMapperUtil;
@@ -10,6 +11,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.text.ParseException;
 import java.time.LocalDateTime;
 
 @Component
@@ -27,17 +29,34 @@
             String header = httpRequest.getHeader("Authorization");
             try {
                 //header
+                String token=header.substring(6);
+                String headerJson = parseJWTHeader(token);
                 //decrypt the jwt
-                header.contains("test");
-                chain.doFilter(request, response);
+                if(headerJson.contains("JWT")){
+                    chain.doFilter(request, response);
+                } else{
+                    setErrorResponse(HttpStatus.BAD_REQUEST, (HttpServletResponse) response);
+                }
             } catch (Exception e) {
-                setErrorResponse(HttpStatus.BAD_REQUEST, (HttpServletResponse) response, e);
+                setErrorResponse(HttpStatus.BAD_REQUEST, (HttpServletResponse) response);
                 e.printStackTrace();
             }
         }
     }
 
-    public void setErrorResponse(HttpStatus status, HttpServletResponse response, Throwable ex) {
+    @SneakyThrows
+    private String parseJWTHeader(String accessToken) {
+        String header;
+        try {
+            var decodedJWT = SignedJWT.parse(accessToken);
+            header = decodedJWT.getHeader().toString();
+        } catch (ParseException e) {
+            throw new Exception("Invalid token!");
+        }
+        return header;
+    }
+
+    public void setErrorResponse(HttpStatus status, HttpServletResponse response) {
         response.setStatus(status.value());
         response.setContentType("application/json");
         // A class used for errors
Index: TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakProvider.java b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakProvider.java
new file mode 100644
--- /dev/null	(date 1652889928564)
+++ b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakProvider.java	(date 1652889928564)
@@ -0,0 +1,61 @@
+package miu.edu.transactionmanagementsystem.config;
+
+
+import com.mashape.unirest.http.JsonNode;
+import com.mashape.unirest.http.Unirest;
+import com.mashape.unirest.http.exceptions.UnirestException;
+import lombok.Getter;
+import org.keycloak.OAuth2Constants;
+import org.keycloak.admin.client.Keycloak;
+import org.keycloak.admin.client.KeycloakBuilder;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+@Getter
+public class KeycloakProvider {
+
+    @Value("${keycloak.auth-server-url}")
+    public String serverURL;
+    @Value("${keycloak.realm}")
+    public String realm;
+    @Value("${keycloak.resource}")
+    public String clientID;
+
+    private static Keycloak keycloak = null;
+
+    public KeycloakProvider() {
+    }
+
+    public Keycloak getInstance() {
+        if (keycloak == null) {
+
+            return KeycloakBuilder.builder()
+                    .realm(realm)
+                    .serverUrl(serverURL)
+                    .clientId(clientID)
+                    .grantType(OAuth2Constants.CLIENT_CREDENTIALS)
+                    .build();
+        }
+        return keycloak;
+    }
+
+
+    public KeycloakBuilder newKeycloakBuilderWithPasswordCredentials(String username, String password) {
+        return KeycloakBuilder.builder() //
+                .realm(realm) //
+                .serverUrl(serverURL)//
+                .clientId(clientID) //
+                .username(username) //
+                .password(password);
+    }
+
+    public JsonNode refreshToken(String refreshToken) throws UnirestException {
+        String url = serverURL + "/realms/" + realm + "/protocol/openid-connect/token";
+        return Unirest.post(url)
+                .header("Content-Type", "application/x-www-form-urlencoded")
+                .field("refresh_token", refreshToken)
+                .field("grant_type", "refresh_token")
+                .asJson().getBody();
+    }
+}
\ No newline at end of file
Index: TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakConfig.java b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakConfig.java
new file mode 100644
--- /dev/null	(date 1652889928584)
+++ b/TransactionManagementSystem/src/main/java/miu/edu/transactionmanagementsystem/config/KeycloakConfig.java	(date 1652889928584)
@@ -0,0 +1,14 @@
+package miu.edu.transactionmanagementsystem.config;
+
+import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class KeycloakConfig {
+
+    @Bean
+    public KeycloakSpringBootConfigResolver keycloakConfigResolver() {
+        return new KeycloakSpringBootConfigResolver();
+    }
+}
\ No newline at end of file
